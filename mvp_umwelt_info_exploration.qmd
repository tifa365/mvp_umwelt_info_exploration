---
title: "Datenanalyse umwelt.info: <br> Von Rohdaten zu Projekten"
subtitle: "<i class='fab fa-github'></i> [github.com/tifa365/mvp_umwelt_info_exploration](https://github.com/tifa365/mvp_umwelt_info_exploration)"
author: "Tim Fangmeyer <div style='font-size: 0.7em; margin-top: 0.5em;'><a href='https://de.linkedin.com/today/author/timfangmeyer' style='color: #0077b5'>**linkedin/today/author/timfangmeyer**</a></div>"
lang: de
kernel: umwelt-info-exploration
format: 
  revealjs:
    theme: dark
    css: styles.css
    embed-resources: true
---

## umwelt.info

Stellt die Daten sowohl √ºber die Suche ...

![](images/suche.png)

## 
<br>
... als auch √ºber eine Schnittstelle bereit.
<br>
<br>
![](images/schnistellen_uebersicht.png)

## Web-UI vs. API-Zugriff
### üåê Web-Oberfl√§che (umwelt.info)
* Intuitives Erkunden und Filtern der Daten
* ABER: "H√§ndische" Arbeit n√∂tig, nicht automatisierbar


### üîå API-Zugriff
* Automatisierung m√∂glich (Scripting, regelm√§√üige Updates)
* Verarbeitung gro√üer Datenmengen
* ABER: Technisches Know-how erforderlich


## Wir sind hier: Metadaten-Exploration

1. ‚úÖ **Katalog durchsuchen**
2. ‚úÖ **Metadaten abrufen**
3. ‚¨ú **Eigentliche Daten herunterladen**
4. ‚¨ú **Daten reinigen, aggregieren, analysieren, visualisieren, etc.**

> üí° **Wichtig:** Die folgenden API-Beispiele zeigen nur die _Suche und Beschreibung_ der Daten.

## API
Programmierschnittstellen (APIs) erm√∂glichen Dritten den Zugang zu vorher verschlossenen Datenpools. 
![](images/api.png)

## Swagger-UI
Interaktive Dokumentation f√ºr REST-APIs. Mit Swagger UI k√∂nnen Entwickler die verf√ºgbaren API-Endpunkte direkt im Browser erkunden.
<br>
![](images/swagger_ui.png)
<small>[swagger-ui/](https://md.umwelt.info/swagger-ui/)</small>


## Umfang der Schnittstelle
<br>
Wichtigste Endpunkte:

* **Volltextsuche** √ºber alle Datens√§tze (+ Filteroptionen)
* **Einzeldatensatz-Abruf** detaillierter Metadaten
* **Statistik-Endpunkt** f√ºr Nutzungsstatistiken


## API: Wichtige CKAN-Endpunkte f√ºr die Abfrage von umwelt.info  
- **`/package_search`** Volltextsuche nach Suchbegriff. Die Wildcard "*" erm√∂glicht die Abfrage des gesamten Metadatenbestandes
- **`/package_show`** Erm√∂glicht die Abfrage einzelner Datens√§tze im CKAN Format.
- **`/counts/now`**: Aktuelle Gesamtzahl an Datens√§tzen.

## API Beispiele mit Python
Beispielshafte Abfrage der CKAN-API mit Python. 
![](images/python_logo.png){width=35% height=35% fig-align="center"}

## API Endpoint: **`/counts/now`** üìà

```{python}
#| echo: true
#| eval: false
import requests

url = "https://md.umwelt.info/counts/now"
response = requests.get(url)
data = response.json()

# Ausgabe der Antwort
print(data)
```
<br>
```{python}
#| echo: true
#| eval: false
# Beispiel-Output:
{
    "datasets": 638373,
    "sources": 129,
    "providers": 45,
    "failed_harvests": 0,
    "errors": 900
}
```

## API Endpoint: **`/package_search`** üîç
<br>
Request 

```{python}
#| echo: true
#| eval: false
import requests

# API-Parameter
base_url = "https://md.umwelt.info/ckan/api/3/action/package_search"
params = {
    "q": "Grundwasserpegel",  # Suchbegriff
    "rows": 1                 # Anzahl der Ergebnisse
}

# API-Abfrage durchf√ºhren
response = requests.get(base_url, params=params)
data = response.json()
```

## API Endpoint: **`/package_search`**
<br>
Result  

```{python}
#| echo: true
#| eval: false
# Beispiel-Output:
{
    "help": "/api/3/action/help_show?name=package_search",
    "success": true,
    "result": {
        "count": 81765,
        "facets": [],
        "search_facets": [],
        "sort": "score desc",
        "results": [
            {
                "id": "**Z292ZGF0YS8xZjM2ZGRhYS0xZGM4LTQ4YWYtOWEyMS1iNmVjZmFlZjExNzk=**",
                "name": "govdata/1f36ddaa-1dc8-48af-9a21-b6ecfaef1179",
                "title": "Grundwasserpegelmessung in Stadt und Landkreis in Osnabr√ºck",
                "private": false,
                "license_url": "https://www.govdata.de/dl-de/by-2-0",
                "license_title": "dl-by-de/2.0"
                ...
            }
        ]
    }
}
```

## API Endpoint: **`/package_show`** üì¶
<br>
Request   

```{python}
#| echo: true
#| eval: false
import requests

# API-Parameter
base_url = "https://md.umwelt.info/ckan/api/3/action/package_show"
dataset_id = "Z292ZGF0YS8xZjM2ZGRhYS0xZGM4LTQ4YWYtOWEyMS1iNmVjZmFlZjExNzk="
params = {"id": dataset_id}

# API-Abfrage durchf√ºhren
response = requests.get(base_url, params=params)
data = response.json()
```

## API Endpoint: **`/package_show`** üì¶
Result   
```{python}
#| echo: true
#| eval: false
# Beispiel-Output:
{
    "help": "/api/3/action/help_show?name=package_show",
    "success": true,
    "result": {
        "id": "Z292ZGF0YS8xZjM2ZGRhYS0xZGM4LTQ4YWYtOWEyMS1iNmVjZmFlZjExNzk=",
        "name": "govdata/1f36ddaa-1dc8-48af-9a21-b6ecfaef1179",
        "title": "Grundwasserpegelmessung in Stadt und Landkreis in Osnabr√ºck",
        "private": false,
        "license_url": "https://www.govdata.de/dl-de/by-2-0",
        "license_title": "dl-by-de/2.0",
        "notes": "An mehreren Stellen in Stadt und Landkreis Osnabr√ºck werden Grundwasserpegel automatisiert mithilfe von Sensoren erfasst."
    }
}
```

## Praxisprojekt: Grundwasser-Atlas
<br>
Das Journalismuskokllektiv CORRECTIV mit einer interaktiven Karte einen √úberblick, wo in Deutschland das Grundwasser seit 1990 sinkt, gleich bleibt oder steigt. 

<small>Quelle: [CORRECTIV](https://correctiv.org/aktuelles/kampf-um-wasser/2022/10/25/klimawandel-grundwasser-in-deutschland-sinkt/)</small>

## Interaktive Karte mit Lokalbezug

![](images/correctiv_karte.png)

<small>
Quelle: [CORRECTIV](https://correctiv.org/aktuelles/kampf-um-wasser/2022/10/25/klimawandel-grundwasser-in-deutschland-sinkt/)
</small>

## Vorgehen beim Grundwasser-Atlas

* Abruf der der Positionen aller Grundwassermessstellen
* Abruf der jeweiligen Pegelst√§nde 1990-2021
* Datenreinigung, Normalisierung, Trendberechnung, Visualisierung

## Welche Probleme k√∂nnen bei der Analyse auftreten?

* Daten nicht vorhanden oder nicht unter Open-Data-Lizenz
* Messwerte vorhanden, aber die Position der Messstellen nicht (Anonymisierung)
* Messstellen werden in unterschiedlichen Zeitr√§umen gemessen

## Praxisbeispiel: Abruf Grundwassermessstellen Berlin 

- Praktische Demonstration anhand eines Bundeslandes
- Suche √ºber das Portal nach den Berliner Grundwasser-Messstellen 

## Praxisbeispiel: Abruf Grundwassermessstellen Berlin 

![](images/grundwassermessstellen_berlin.png)

## Grundwassermessstellen als  WFS-Daten
Web Feature Services sind Webschnittstellen, die den direkten Zugriff auf raumbezogene Daten erm√∂glichen. 

![](images/govdata_grundwassermessstellen.png){width=70% height=70%}

<small>
Quelle: [GovData](https://www.govdata.de/suche/daten/grundwassermessstellen)
</small>

## Abruf der WFS-Daten mit Python
Request
```{python}
#| echo: true
#| eval: false
import requests
import json

url = "https://gdi.berlin.de/services/wfs/gwm"
params = {
    'SERVICE': 'WFS',
    'VERSION': '2.0.0',
    'REQUEST': 'GetFeature',
    'TYPENAMES': 'gwm:grundwassermessstellen',
    'OUTPUTFORMAT': 'application/json'
}

response = requests.get(url, params=params)
data = response.json()

print(json.dumps(data, indent=2))
```

## Abruf der WFS-Daten mit Python
Result
```{python}
#| echo: true
#| eval: false
{
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "id": "grundwassermessstellen.BL101A0060FIL001",
      "geometry": {
        "type": "Point",
        "coordinates": [
          409227.03,
          5812357.89
        ]
      },
      "geometry_name": "geom",
      ...}
  ]
}
```

## Grundwassermessstellen
mvp.umwelt.info stellt die Daten der Messstellen bereits als Geojson-Datei bereit.

![](images/grundwassermessstellen.png)

<small>
Link: [Grundwasser-Analyse](https://correctiv.org/aktuelles/kampf-um-wasser/2022/10/25/klimawandel-grundwasser-in-deutschland-sinkt/)
</small>

## Projekt-Ideen zum Kennenlernen von mvp.umwelt.info
* Ein weiteres Bundesland ausw√§hlen und Grundwasserdaten auf umwelt.info finden
* Metadatenanalyse der Grundwasser-Messstellen fortf√ºhren
* Wie entwickelt sich der Wasserstand bei Fl√ºssen, Seen, Teichen?

<small>Link: [Grundwasser-Analyse](https://correctiv.org/aktuelles/kampf-um-wasser/2022/10/25/klimawandel-grundwasser-in-deutschland-sinkt/)
</small>


## Bonus-Content

Auf den folgenden Folien finden sich einige vertiefende Infos zur Pr√§sentation.

## üí° Web-UI vs. API-Zugriff Zusammenfassung
<br>

* Suche: Zum Erkunden und Verstehen der Daten
* Schnittstelle (API): F√ºr systematische Datenabfragen

## CKAN-API: Bereitstellung von Metadaten
<br>
CKAN (Comprehensive Knowledge Archive Network) ist eine Open Source-Software zur Katalogisierung und Bereitstellung von Open Data.
![](images/ckan_logo.png){width=70% height=70% fig-align="center"}

## Grundwasser-Atlas: Beispiel-Visualisierung

![](images/correctiv_anzahl_tiefstwerte.png){width=80% height=80%}

<small>
Quelle: [CORRECTIV](https://correctiv.org/aktuelles/kampf-um-wasser/2022/10/25/klimawandel-grundwasser-in-deutschland-sinkt/)
</small>

Grundwasser-Atlas: Beispielhafte Visualisierung mit Python

## Grundwassertrends in Deutschland 1990-2021 (Python-Code verf√ºgbar in .qmd)

```{python}
import plotly.graph_objects as go

# Data
trend_data = [
    {"name": "Stark sinkend", "value": 533, "color": "#E9650E", "percent": 8.0},
    {"name": "Leicht sinkend", "value": 1087, "color": "#FFB727", "percent": 16.3},
    {"name": "Kein starker Trend", "value": 4035, "color": "#eeeeee", "percent": 60.4},
    {"name": "Leicht steigend", "value": 529, "color": "#71B5FE", "percent": 7.9},
    {"name": "Stark steigend", "value": 493, "color": "#0163CB", "percent": 7.4}
]

# Create figure
fig = go.Figure()

# Add bar chart
fig.add_trace(
    go.Bar(
        x=[d["name"] for d in trend_data],
        y=[d["value"] for d in trend_data],
        marker_color=[d["color"] for d in trend_data],
        text=[d["value"] for d in trend_data],
        textposition='auto',
    )
)

# Update layout
fig.update_layout(
    title_text="Grundwassertrends in Deutschland 1990-2021",
    showlegend=False,
    height=500,  # Reduced height since we only have one chart now
    paper_bgcolor='black',
    plot_bgcolor='black',
    font=dict(color='white'),
    template='plotly_dark'
    # annotations=[
    #     dict(
    #         text=f"Gesamtzahl der Messstellen: {sum(d['value'] for d in trend_data)}",
    #         xref="paper",
    #         yref="paper",
    #         x=0.5,
    #         y=1.1,
    #         showarrow=False,
    #         font=dict(size=16, color='white')
    #     )
    # ]
)

# Update axes
fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='rgba(128,128,128,0.2)')
fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='rgba(128,128,128,0.2)')

# Make it responsive
config = {
    'responsive': True,
    'displayModeBar': False
}

fig.show(config=config)
```




